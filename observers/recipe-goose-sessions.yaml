version: 1.0.0
title: Improvements
author:
  contact: mic
description: update goose session state
instruction: |
  NOTE: this task runs unsupervised, so don't expect the user to respond directly, and anything you print out will probably not be read so your output must be assuming that this is a background task.
  you will note recent goose sessions and keep the user updated with what is going on
extensions:
- type: builtin
  name: developer
  display_name: Developer
  timeout: 300
  bundled: true


prompt: |  
  look in  ~/.local/share/goose/sessions 
  for the most recent sessions, then make a tmp html page with the template below filled in with the most recent and interesting sessions (use the file date)
  the first line of the jsonl file usually has a summary of the session. 

  Consider ~/.local/share/goose-perception/LATEST_WORK.md and ~/.local/share/goose-perception/PROJECTS.md to help you understand what the user is working on, and be sure to include recent sessions which may be relevant
  The idea is to remind the user of some sessions that they started which they may not have finished, forgotten about based on ~/.local/share/goose-perception/WORK.md
  and open it with: 
    "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" --app="file:.. fill path to single html page .." 

  NOTE: You only need to do this if you think there is work being missed - if the sessions are older than say a day, don't include them or if there are newer ones for the same directory that are more relevant, don't include the older ones.
  
  <!DOCTYPE html>
  <html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Goose Projects Dashboard</title>
      <style>
          * {
              margin: 0;
              padding: 0;
              box-sizing: border-box;
          }
  
          body {
              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
              min-height: 100vh;
              padding: 20px;
          }
  
          .container {
              max-width: 1200px;
              margin: 0 auto;
          }
  
          .header {
              text-align: center;
              color: white;
              margin-bottom: 40px;
          }
  
          .header h1 {
              font-size: 3rem;
              margin-bottom: 10px;
              text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
          }
  
          .header p {
              font-size: 1.2rem;
              opacity: 0.9;
          }
  
          .projects-grid {
              display: grid;
              grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
              gap: 25px;
              margin-bottom: 40px;
          }
  
          .project-card {
              background: rgba(255, 255, 255, 0.95);
              border-radius: 15px;
              padding: 25px;
              box-shadow: 0 10px 30px rgba(0,0,0,0.2);
              transition: transform 0.3s ease, box-shadow 0.3s ease;
              backdrop-filter: blur(10px);
          }
  
          .project-card:hover {
              transform: translateY(-5px);
              box-shadow: 0 15px 40px rgba(0,0,0,0.3);
          }
  
          .project-header {
              display: flex;
              align-items: center;
              margin-bottom: 15px;
          }
  
          .project-icon {
              width: 40px;
              height: 40px;
              background: linear-gradient(45deg, #667eea, #764ba2);
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              margin-right: 15px;
              color: white;
              font-weight: bold;
              font-size: 1.2rem;
          }
  
          .project-title {
              font-size: 1.4rem;
              font-weight: 600;
              color: #333;
              flex: 1;
          }
  
          .project-path {
              font-family: 'Courier New', monospace;
              font-size: 0.85rem;
              color: #666;
              background: #f5f5f5;
              padding: 8px 12px;
              border-radius: 6px;
              margin-bottom: 15px;
              word-break: break-all;
              cursor: pointer;
              transition: background-color 0.3s ease;
          }
  
          .project-path:hover {
              background: #e8e8e8;
          }
  
          .project-details {
              display: grid;
              gap: 12px;
          }
  
          .detail-row {
              display: flex;
              justify-content: space-between;
              align-items: flex-start;
              padding: 8px 0;
              border-bottom: 1px solid #eee;
          }
  
          .detail-row:last-child {
              border-bottom: none;
          }
  
          .detail-label {
              font-weight: 600;
              color: #555;
              min-width: 120px;
          }
  
          .detail-value {
              color: #333;
              text-align: right;
              flex: 1;
              margin-left: 15px;
          }
  
          .timestamp {
              font-family: 'Courier New', monospace;
              font-size: 0.85rem;
              color: #666;
          }
  
          .instruction-preview {
              font-style: italic;
              color: #666;
              max-height: 60px;
              overflow: hidden;
              position: relative;
          }
  
          .session-id {
              font-family: 'Courier New', monospace;
              font-size: 0.85rem;
              color: #007acc;
              background: #e6f3ff;
              padding: 4px 8px;
              border-radius: 4px;
          }
  
          .stats-summary {
              background: rgba(255, 255, 255, 0.95);
              border-radius: 15px;
              padding: 25px;
              box-shadow: 0 10px 30px rgba(0,0,0,0.2);
              backdrop-filter: blur(10px);
              text-align: center;
          }
  
          .stats-grid {
              display: grid;
              grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
              gap: 20px;
              margin-top: 20px;
          }
  
          .stat-item {
              padding: 15px;
              background: linear-gradient(45deg, #667eea, #764ba2);
              color: white;
              border-radius: 10px;
          }
  
          .stat-number {
              font-size: 2rem;
              font-weight: bold;
              display: block;
          }
  
          .stat-label {
              font-size: 0.9rem;
              opacity: 0.9;
          }
  
          .no-instruction {
              color: #999;
              font-style: italic;
          }
  
          .generation-time {
              text-align: center;
              color: white;
              opacity: 0.7;
              margin-top: 20px;
              font-size: 0.9rem;
          }
  
          @media (max-width: 768px) {
              .projects-grid {
                  grid-template-columns: 1fr;
              }
              
              .header h1 {
                  font-size: 2rem;
              }
              
              .project-card {
                  padding: 20px;
              }
          }
      </style>
  </head>
  <body>
      <div class="container">
          <div class="header">
              <h1>ðŸª¿ Goose Projects Dashboard</h1>
              <p>Recent project activity and workspace overview</p>
          </div>
  
          <div class="projects-grid">
  HTMLEOF
  
  # Parse JSON and generate project cards
  jq -r '.projects | to_entries | sort_by(.value.last_accessed) | reverse | .[] | @base64' "$PROJECTS_FILE" | while read -r project_data; do
      # Decode base64 and extract project information
      project_json=$(echo "$project_data" | base64 --decode)
      
      path=$(echo "$project_json" | jq -r '.key')
      last_accessed=$(echo "$project_json" | jq -r '.value.last_accessed')
      last_instruction=$(echo "$project_json" | jq -r '.value.last_instruction')
      last_session_id=$(echo "$project_json" | jq -r '.value.last_session_id')
      
      # Get project metadata
      icon=$(get_project_icon "$path")
      title=$(get_project_title "$path")
      formatted_time=$(format_timestamp "$last_accessed")
      truncated_instruction=$(truncate_instruction "$last_instruction")
      formatted_session=$(format_session_id "$last_session_id")
      
      # Generate project card HTML
      cat >> "$OUTPUT_FILE" << CARDEOF
              <div class="project-card">
                  <div class="project-header">
                      <div class="project-icon">$icon</div>
                      <div class="project-title">$title</div>
                  </div>
                  <div class="project-path" title="Click to copy path">$path</div>
                  <div class="project-details">
                      <div class="detail-row">
                          <div class="detail-label">Last Accessed:</div>
                          <div class="detail-value timestamp">$formatted_time</div>
                      </div>
                      <div class="detail-row">
                          <div class="detail-label">Session ID:</div>
                          <div class="detail-value">$formatted_session</div>
                      </div>
                      <div class="detail-row">
                          <div class="detail-label">Last Task:</div>
                          <div class="detail-value instruction-preview">$truncated_instruction</div>
                      </div>
                  </div>
              </div>
  CARDEOF
  done
  
  # Calculate statistics
  total_projects=$(jq '.projects | length' "$PROJECTS_FILE")
  active_sessions=$(jq '.projects | [.[] | select(.last_session_id != null and .last_session_id != "null")] | length' "$PROJECTS_FILE")
  recent_activity=$(jq --arg date "$(date -v-7d '+%Y-%m-%dT%H:%M:%S')" '.projects | [.[] | select(.last_accessed != null and .last_accessed > $date)] | length' "$PROJECTS_FILE")
  goose_variants=$(jq '.projects | [.[] | select(.key | type == "string" and test("goose"))] | length' "$PROJECTS_FILE")
  
  # Add statistics section and close HTML
  cat >> "$OUTPUT_FILE" << FOOTEREOF
          </div>
  
          <div class="stats-summary">
              <h2>ðŸ“Š Project Statistics</h2>
              <div class="stats-grid">
                  <div class="stat-item">
                      <span class="stat-number">$total_projects</span>
                      <span class="stat-label">Total Projects</span>
                  </div>
                  <div class="stat-item">
                      <span class="stat-number">$active_sessions</span>
                      <span class="stat-label">Active Sessions</span>
                  </div>
                  <div class="stat-item">
                      <span class="stat-number">$recent_activity</span>
                      <span class="stat-label">Recent Activity</span>
                  </div>
                  <div class="stat-item">
                      <span class="stat-number">$goose_variants</span>
                      <span class="stat-label">Goose Variants</span>
                  </div>
              </div>
          </div>
  
          <div class="generation-time">
              Generated on $(date '+%Y-%m-%d %H:%M:%S')
          </div>
      </div>
  
      <script>
          // Add interactive hover effects
          document.querySelectorAll('.project-card').forEach(card => {
              card.addEventListener('mouseenter', function() {
                  this.style.transform = 'translateY(-8px) scale(1.02)';
              });
              
              card.addEventListener('mouseleave', function() {
                  this.style.transform = 'translateY(0) scale(1)';
              });
          });
  
          // Add click to copy path functionality
          document.querySelectorAll('.project-path').forEach(path => {
              path.addEventListener('click', function() {
                  navigator.clipboard.writeText(this.textContent).then(() => {
                      const original = this.textContent;
                      this.textContent = 'ðŸ“‹ Copied!';
                      this.style.background = '#d4edda';
                      
                      setTimeout(() => {
                          this.textContent = original;
                          this.style.background = '#f5f5f5';
                      }, 1500);
                  });
              });
          });
  
          // Add timestamp formatting with relative time tooltips
          document.querySelectorAll('.timestamp').forEach(timestamp => {
              if (timestamp.textContent !== 'Never') {
                  const date = new Date(timestamp.textContent);
                  const now = new Date();
                  const diffMs = now - date;
                  const diffMins = Math.floor(diffMs / 60000);
                  const diffHours = Math.floor(diffMins / 60);
                  const diffDays = Math.floor(diffHours / 24);
                  
                  let relativeTime = '';
                  if (diffMins < 60) {
                      relativeTime = `${diffMins} minutes ago`;
                  } else if (diffHours < 24) {
                      relativeTime = `${diffHours} hours ago`;
                  } else {
                      relativeTime = `${diffDays} days ago`;
                  }
                  
                  timestamp.title = `${timestamp.textContent} (${relativeTime})`;
              }
          });
      </script>
  </body>
  </html>
