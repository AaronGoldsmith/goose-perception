version: 1.0.0
title: Actionable Avatar Suggestions
author:
  contact: mic
description: Generate actionable avatar suggestions with specific executable actions
instructions: |
  analyze work patterns and generate actionable suggestions that the avatar can execute
  focus on specific actions like sending emails, creating meetings, updating status, managing tasks
extensions:
- type: builtin
  name: developer
  display_name: Developer
  timeout: 300
  bundled: true

prompt: |
  CURRENT LOCAL TIME: $(date)
  TIMEZONE: $(date +%Z)
  
  **GOOSE MCP (MODEL CONTEXT PROTOCOL) CAPABILITIES:**
  Goose integrates with MCP servers to provide external tool access:
  - MCP servers provide tools, resources, and prompts for LLM interactions
  - Common MCP servers available: Slack, GitHub, file systems, databases, APIs, etc.
  - MCP servers are configured in Goose's configuration, not enabled via command line
  - Actions should leverage available MCP tools when possible
  - If MCP integration is needed, suggest configuring appropriate MCP servers
  
  Analyze work patterns in ~/.local/share/goose-perception/ and generate actionable suggestions.
  Look for specific patterns that need action:
  
  **COMMUNICATION GAPS:**
  - No updates sent to team/channels in X days
  - Meetings scheduled but no follow-up
  - Messages/emails that need responses
  - Status not updated recently
  
  **WORK PATTERNS:**
  - Tasks started but not completed
  - Work stopped abruptly on important items
  - Deadlines approaching without progress
  - Recurring tasks that might be due
  
  **PRODUCTIVITY OPPORTUNITIES:**
  - Good time for specific types of work
  - Should schedule time for important tasks
  - Need to organize or plan work
  - Time to review/clean up work
  
  **OUTPUT FORMAT: Valid JSON only**
  
  Create a JSON object with an "actionable_suggestions" array. Each suggestion should have these fields:
  - action_type: The type of action (email, slack, meeting, calendar, github, task, reminder, document, status, review, mcp)
  - observation_type: What kind of pattern was observed (communication, follow_up, scheduling, code_review, completion, deadline, setup, etc.)
  - message: The suggestion text to display to the user
  - action_command: The command/action identifier for execution
  
  **EXAMPLE JSON OUTPUT:**
  {
    "actionable_suggestions": [
      {
        "action_type": "email",
        "observation_type": "communication",
        "message": "You haven't sent an update to the team in 3 days. Send status update?",
        "action_command": "compose_team_update"
      },
      {
        "action_type": "slack",
        "observation_type": "communication", 
        "message": "No Slack updates sent this week. Post team status to #engineering?",
        "action_command": "post_slack_update"
      },
      {
        "action_type": "meeting",
        "observation_type": "follow_up",
        "message": "Yesterday's design meeting needs follow-up. Schedule planning session?",
        "action_command": "create_follow_up_meeting"
      }
    ]
  }
  
  **ACTION TYPES:**
  - email: Send an email
  - slack: Send Slack message/update
  - message: Send a message/update
  - meeting: Create or schedule a meeting
  - calendar: Schedule time/events
  - github: GitHub actions (PR, issues, etc.)
  - task: Create or update a task
  - reminder: Set a reminder
  - document: Create or update documentation
  - status: Update status/progress
  - review: Review or organize work
  - mcp: Setup/configure required MCP servers
  
  Focus on:
  - Recent patterns (last 1-3 days)
  - Important/urgent items
  - Communication responsibilities
  - Work momentum and completion
  
  Save to ~/.local/share/goose-perception/ACTIONABLE_SUGGESTIONS.json as valid JSON.
  Only suggest actions based on real patterns you observe in the data.
  If there's insufficient data, generate fewer suggestions rather than generic ones.
  Do not include any text outside the JSON object - output ONLY valid JSON. 